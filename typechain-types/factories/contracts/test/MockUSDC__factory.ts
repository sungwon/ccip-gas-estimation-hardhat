/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  BigNumberish,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../common";
import type {
  MockUSDC,
  MockUSDCInterface,
} from "../../../contracts/test/MockUSDC";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "initialSupply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001ea938038062001ea9833981810160405281019062000037919062000299565b6040518060400160405280600981526020017f4d6f636b205553444300000000000000000000000000000000000000000000008152506040518060400160405280600481526020017f55534443000000000000000000000000000000000000000000000000000000008152508160039081620000b491906200053b565b508060049081620000c691906200053b565b505050620000db3382620000e260201b60201c565b506200073d565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000154576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014b9062000683565b60405180910390fd5b62000168600083836200024f60201b60201c565b80600260008282546200017c9190620006d4565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef836040516200022f919062000720565b60405180910390a36200024b600083836200025460201b60201c565b5050565b505050565b505050565b600080fd5b6000819050919050565b62000273816200025e565b81146200027f57600080fd5b50565b600081519050620002938162000268565b92915050565b600060208284031215620002b257620002b162000259565b5b6000620002c28482850162000282565b91505092915050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200034d57607f821691505b60208210810362000363576200036262000305565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003cd7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200038e565b620003d986836200038e565b95508019841693508086168417925050509392505050565b6000819050919050565b60006200041c6200041662000410846200025e565b620003f1565b6200025e565b9050919050565b6000819050919050565b6200043883620003fb565b62000450620004478262000423565b8484546200039b565b825550505050565b600090565b6200046762000458565b620004748184846200042d565b505050565b5b818110156200049c57620004906000826200045d565b6001810190506200047a565b5050565b601f821115620004eb57620004b58162000369565b620004c0846200037e565b81016020851015620004d0578190505b620004e8620004df856200037e565b83018262000479565b50505b505050565b600082821c905092915050565b60006200051060001984600802620004f0565b1980831691505092915050565b60006200052b8383620004fd565b9150826002028217905092915050565b6200054682620002cb565b67ffffffffffffffff811115620005625762000561620002d6565b5b6200056e825462000334565b6200057b828285620004a0565b600060209050601f831160018114620005b357600084156200059e578287015190505b620005aa85826200051d565b8655506200061a565b601f198416620005c38662000369565b60005b82811015620005ed57848901518255600182019150602085019450602081019050620005c6565b868310156200060d578489015162000609601f891682620004fd565b8355505b6001600288020188555050505b505050505050565b600082825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006200066b601f8362000622565b9150620006788262000633565b602082019050919050565b600060208201905081810360008301526200069e816200065c565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620006e1826200025e565b9150620006ee836200025e565b9250828201905080821115620007095762000708620006a5565b5b92915050565b6200071a816200025e565b82525050565b60006020820190506200073760008301846200070f565b92915050565b61175c806200074d6000396000f3fe608060405234801561001057600080fd5b50600436106100cf5760003560e01c806340c10f191161008c5780639dc29fac116100665780639dc29fac14610228578063a457c2d714610244578063a9059cbb14610274578063dd62ed3e146102a4576100cf565b806340c10f19146101be57806370a08231146101da57806395d89b411461020a576100cf565b806306fdde03146100d4578063095ea7b3146100f257806318160ddd1461012257806323b872dd14610140578063313ce56714610170578063395093511461018e575b600080fd5b6100dc6102d4565b6040516100e99190610ea9565b60405180910390f35b61010c60048036038101906101079190610f64565b610366565b6040516101199190610fbf565b60405180910390f35b61012a610389565b6040516101379190610fe9565b60405180910390f35b61015a60048036038101906101559190611004565b610393565b6040516101679190610fbf565b60405180910390f35b6101786103c2565b6040516101859190611073565b60405180910390f35b6101a860048036038101906101a39190610f64565b6103cb565b6040516101b59190610fbf565b60405180910390f35b6101d860048036038101906101d39190610f64565b610402565b005b6101f460048036038101906101ef919061108e565b610410565b6040516102019190610fe9565b60405180910390f35b610212610458565b60405161021f9190610ea9565b60405180910390f35b610242600480360381019061023d9190610f64565b6104ea565b005b61025e60048036038101906102599190610f64565b6104f8565b60405161026b9190610fbf565b60405180910390f35b61028e60048036038101906102899190610f64565b61056f565b60405161029b9190610fbf565b60405180910390f35b6102be60048036038101906102b991906110bb565b610592565b6040516102cb9190610fe9565b60405180910390f35b6060600380546102e39061112a565b80601f016020809104026020016040519081016040528092919081815260200182805461030f9061112a565b801561035c5780601f106103315761010080835404028352916020019161035c565b820191906000526020600020905b81548152906001019060200180831161033f57829003601f168201915b5050505050905090565b600080610371610619565b905061037e818585610621565b600191505092915050565b6000600254905090565b60008061039e610619565b90506103ab8582856107ea565b6103b6858585610876565b60019150509392505050565b60006012905090565b6000806103d6610619565b90506103f78185856103e88589610592565b6103f2919061118a565b610621565b600191505092915050565b61040c8282610aec565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546104679061112a565b80601f01602080910402602001604051908101604052809291908181526020018280546104939061112a565b80156104e05780601f106104b5576101008083540402835291602001916104e0565b820191906000526020600020905b8154815290600101906020018083116104c357829003601f168201915b5050505050905090565b6104f48282610c42565b5050565b600080610503610619565b905060006105118286610592565b905083811015610556576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161054d90611230565b60405180910390fd5b6105638286868403610621565b60019250505092915050565b60008061057a610619565b9050610587818585610876565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610690576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610687906112c2565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106f690611354565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107dd9190610fe9565b60405180910390a3505050565b60006107f68484610592565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108705781811015610862576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610859906113c0565b60405180910390fd5b61086f8484848403610621565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108dc90611452565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610954576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161094b906114e4565b60405180910390fd5b61095f838383610e0f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109dc90611576565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610ad39190610fe9565b60405180910390a3610ae6848484610e14565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610b5b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b52906115e2565b60405180910390fd5b610b6760008383610e0f565b8060026000828254610b79919061118a565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610c2a9190610fe9565b60405180910390a3610c3e60008383610e14565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610cb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca890611674565b60405180910390fd5b610cbd82600083610e0f565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610d43576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d3a90611706565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610df69190610fe9565b60405180910390a3610e0a83600084610e14565b505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610e53578082015181840152602081019050610e38565b60008484015250505050565b6000601f19601f8301169050919050565b6000610e7b82610e19565b610e858185610e24565b9350610e95818560208601610e35565b610e9e81610e5f565b840191505092915050565b60006020820190508181036000830152610ec38184610e70565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610efb82610ed0565b9050919050565b610f0b81610ef0565b8114610f1657600080fd5b50565b600081359050610f2881610f02565b92915050565b6000819050919050565b610f4181610f2e565b8114610f4c57600080fd5b50565b600081359050610f5e81610f38565b92915050565b60008060408385031215610f7b57610f7a610ecb565b5b6000610f8985828601610f19565b9250506020610f9a85828601610f4f565b9150509250929050565b60008115159050919050565b610fb981610fa4565b82525050565b6000602082019050610fd46000830184610fb0565b92915050565b610fe381610f2e565b82525050565b6000602082019050610ffe6000830184610fda565b92915050565b60008060006060848603121561101d5761101c610ecb565b5b600061102b86828701610f19565b935050602061103c86828701610f19565b925050604061104d86828701610f4f565b9150509250925092565b600060ff82169050919050565b61106d81611057565b82525050565b60006020820190506110886000830184611064565b92915050565b6000602082840312156110a4576110a3610ecb565b5b60006110b284828501610f19565b91505092915050565b600080604083850312156110d2576110d1610ecb565b5b60006110e085828601610f19565b92505060206110f185828601610f19565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061114257607f821691505b602082108103611155576111546110fb565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061119582610f2e565b91506111a083610f2e565b92508282019050808211156111b8576111b761115b565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b600061121a602583610e24565b9150611225826111be565b604082019050919050565b600060208201905081810360008301526112498161120d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006112ac602483610e24565b91506112b782611250565b604082019050919050565b600060208201905081810360008301526112db8161129f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b600061133e602283610e24565b9150611349826112e2565b604082019050919050565b6000602082019050818103600083015261136d81611331565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b60006113aa601d83610e24565b91506113b582611374565b602082019050919050565b600060208201905081810360008301526113d98161139d565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b600061143c602583610e24565b9150611447826113e0565b604082019050919050565b6000602082019050818103600083015261146b8161142f565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b60006114ce602383610e24565b91506114d982611472565b604082019050919050565b600060208201905081810360008301526114fd816114c1565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611560602683610e24565b915061156b82611504565b604082019050919050565b6000602082019050818103600083015261158f81611553565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b60006115cc601f83610e24565b91506115d782611596565b602082019050919050565b600060208201905081810360008301526115fb816115bf565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b600061165e602183610e24565b915061166982611602565b604082019050919050565b6000602082019050818103600083015261168d81611651565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b60006116f0602283610e24565b91506116fb82611694565b604082019050919050565b6000602082019050818103600083015261171f816116e3565b905091905056fea2646970667358221220c6f4a1fc0eef587a94a6c4239ab616f345916ebd8cc45590e88bb20379a9fd9364736f6c63430008130033";

type MockUSDCConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockUSDCConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockUSDC__factory extends ContractFactory {
  constructor(...args: MockUSDCConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(initialSupply, overrides || {});
  }
  override deploy(
    initialSupply: BigNumberish,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(initialSupply, overrides || {}) as Promise<
      MockUSDC & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): MockUSDC__factory {
    return super.connect(runner) as MockUSDC__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockUSDCInterface {
    return new Interface(_abi) as MockUSDCInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): MockUSDC {
    return new Contract(address, _abi, runner) as unknown as MockUSDC;
  }
}
